import 'dart:convert';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:syncfusion_flutter_charts/charts.dart';
import 'package:test2/AllDataScreen.dart';

class T2_1 extends StatefulWidget {
  const T2_1 ({Key? key}) : super(key: key);

  @override
  State<T2_1> createState() => _T2_1State();
}
class _T2_1State extends State<T2_1>{
  late Future<Map<int, List<Article>>> articles;
  int? selectedIdw;
  Map<int, Color> idwColors = {};
  DateTime selectedDate = DateTime.now();
  Map<DateTime, double> averageCapacityMap = {};
  

  @override
  void initState() {
    print("initState"); // สำหรับทดสอบ
    super.initState();
    articles = fetchArticle(selectedDate);
    selectedIdw = 1;
    
  }

  @override
  Widget build(BuildContext context){
    return Scaffold(
      appBar: AppBar(
        title: Text('Charts'),
      ),
      body: ListView(
        children: [
          FutureBuilder<Map<int, List<Article>>>(
            future: articles,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                final idwMap = snapshot.data!;
                final dropdownItems = <DropdownMenuItem<int>>[];

                idwMap.forEach((idw, articles) {
                  dropdownItems.add(
                    DropdownMenuItem(value: idw, child: Text('Idw $idw')),
                  );
                  if (!idwColors.containsKey(idw)) {
                    idwColors[idw] = Color((Random().nextDouble() * 0xFFFFFF).toInt() << 0).withOpacity(1.0);
                  }
                });
                return DropdownButton<int>(
                  value: selectedIdw,
                  items: dropdownItems,
                  onChanged: (value) async {
                    final picked = await showDatePicker(
                      context: context,
                      initialDate: selectedDate,
                      firstDate: DateTime(2020),
                      lastDate: DateTime.now(),
                    );
                    if (picked != null && picked != selectedDate) {
                      final newArticles = await fetchArticle(picked);
                      setState(() {
                        selectedIdw = value;
                        selectedDate = picked;
                        articles = Future.value(newArticles);
                      });
                    } else {
                      setState(() {
                        selectedIdw = value;
                      });
                    }
                  },
                );
              
              } else if (snapshot.hasError) {
                return Text("${snapshot.error}");
              }
              return Center(
                child: CircularProgressIndicator(),
              );
            },
          ),
          Expanded(
            child: FutureBuilder<Map<int, List<Article>>>(
              future: articles,
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  final idwMap = snapshot.data!;
                  final data = selectedIdw != null ? idwMap[selectedIdw!] ?? [] : idwMap.values.expand((articles) => articles).toList();
                  data.sort((a, b) => a.Date_Time.compareTo(b.Date_Time));
                  final averageCapacityMap = calculateAverageCapacity(idwMap);
                  final averageCapacity = data.isNotEmpty
                      ? data.map((article) => article.Capacity).reduce((a, b) => a + b) / data.length
                      : 0.0;

                  final averageData = averageCapacityMap.entries
                  .map((entry) => Article(
                      Idw: 0, // Setting a placeholder Idw value for average data
                      Capacity: entry.value.toInt(),
                      Date_Time: entry.key))
                  .toList();

                  return Column(
                    children: [
                      SfCartesianChart(
                        title: ChartTitle(text: 'Capacity vs Time'),
                        legend: Legend(
                          isVisible: true,
                          title: LegendTitle(text: 'Legend'),
                        ),
                        tooltipBehavior: TooltipBehavior(enable: true),
                        series: <ChartSeries>[
                          StackedLineSeries<Article, DateTime>(
                            name: 'Capacity',
                            dataSource: averageData,
                            color: idwColors[selectedIdw] ?? Colors.black,
                            xValueMapper: (Article article, _) => article.Date_Time,
                            yValueMapper: (Article article, _) => article.Capacity,
                            dataLabelSettings: DataLabelSettings(isVisible: true),
                          ),
                        ],
                        primaryXAxis: DateTimeAxis(
                          title: AxisTitle(text: 'Time'),
                          minimum: DateTime(selectedDate.year, selectedDate.month,1, selectedDate.day, 0), // set minimum time to 6 am
                          maximum: DateTime(selectedDate.year, selectedDate.month +1, selectedDate.day, 23,59),
                        ),
                        primaryYAxis: NumericAxis(
                          title: AxisTitle(text: 'Capacity'), // Add title for y-axis
                        ),
                      ),
                      Text('Average capacity: ${averageCapacity.toStringAsFixed(2)}'),
                    ],
                  );
                } else if (snapshot.hasError) {
                  return Text("${snapshot.error}");
                }

                return Center(
                  child: CircularProgressIndicator(),
                );
              },
            ),
          ),
          Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SizedBox(height: 16.0),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => AllDataScreen()),
                  );
                },
                child: Text('Capacity Of All Data'),
              ),
            ],
          ),

        ],
      ),
    );
  }
}


Future<Map<int, List<Article>>> fetchArticle(DateTime selectedDate) async {
  final firstDayOfMonth = DateTime(selectedDate.year, selectedDate.month, 1);
  final lastDayOfMonth = DateTime(selectedDate.year, selectedDate.month + 1, 0);
  final formattedStartDate = DateFormat('MM/dd/yyyy').format(firstDayOfMonth);
  final formattedEndDate = DateFormat('MM/dd/yyyy').format(lastDayOfMonth);
  
  final response = await http.get(Uri.parse('https://proesp32.000webhostapp.com/getDataByDateRange.php?start_date='
      '$formattedStartDate&end_date=$formattedEndDate'));
      
  if (response.statusCode == 200) {
    final articles = parseArticles(response.body);
    final idwMap = <int, List<Article>>{};
    articles.forEach((article) {
      final idw = article.Idw;
      if (!idwMap.containsKey(idw)) {
        idwMap[idw] = [];
      }
      if (article.Date_Time.isAfter(firstDayOfMonth) && article.Date_Time.isBefore(lastDayOfMonth)) {
        idwMap[idw]!.add(article);
      }
    });
    return idwMap;
  } else {
    throw Exception('Failed to load article');
  }
}

// Add a function to calculate average capacity for each day
Map<DateTime, double> calculateAverageCapacity(Map<int, List<Article>> idwMap) {
  final averageCapacityMap = <DateTime, double>{};

  idwMap.forEach((idw, articles) {
    final dailyCapacityMap = <DateTime, List<int>>{};
    
    articles.forEach((article) {
      final date = DateTime(article.Date_Time.year, article.Date_Time.month, article.Date_Time.day);
      if (!dailyCapacityMap.containsKey(date)) {
        dailyCapacityMap[date] = [];
      }
      dailyCapacityMap[date]!.add(article.Capacity);
    });

    dailyCapacityMap.forEach((date, capacities) {
      final averageCapacity = capacities.isNotEmpty ? capacities.reduce((a, b) => a + b) / capacities.length : 0.0;
      averageCapacityMap[date] = averageCapacity;
    });
  });

  return averageCapacityMap;
}

List<Article> parseArticles(String responseBody) {
  final parsed = jsonDecode(responseBody).cast<Map<String, dynamic>>();
  return parsed.map<Article>((json) {
    if (!json.containsKey('Capacity') || !json.containsKey('Date_Time')) {
      throw FormatException('Invalid JSON data');
    }

    try {
      return Article.fromJson(json);
    } catch (e) {
      throw FormatException('Invalid JSON data: $e');
    }
  }).toList();
}

class Article {
  final int Idw;
  final int Capacity;
  final DateTime Date_Time;


  Article({
    required this.Idw,
    required this.Capacity,
    required this.Date_Time,

  });

  factory Article.fromJson(Map<String, dynamic> json) {
    return Article(
      Idw: int.parse(json['Idw']),
      Capacity: int.parse(json['Capacity']),
      Date_Time: DateFormat('MM/dd/yyyy hh:mm:ss').parse(json['Date_Time']),
    );
  }
}